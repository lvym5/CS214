Script started on 2024-03-25 13:16:59-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="117" LINES="55"]
]0;lvm5@maroon07: ~/214/labs/09/java[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/java[00m$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student:
 * Date:
 ************************************************************/

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");

      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;

      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");

      System.out.println("All tests passed!");
  }
}

]0;lvm5@maroon07: ~/214/labs/09/java[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/java[00m$ cat Name.java
/* Name.java implements class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student:
 * Date:
 ************************************************************/
// the Name class appears outside of the rest of the program
class Name {

  // Name object constructor with initialization  
  public Name(final String first, final String middle, final String last) {
      myFirst = first;
      myMiddle = middle;
      myLast = last;
  }

  // extractor for first name of a Name object
  public final String getFirst() {
      return myFirst;
  }

  // extractor for middle name of a Name object
  public final String getMiddle() {
      return myMiddle;
  }

  // extractor for last name of a Name object
  public final String getLast() {
      return myLast;
  }

  // return string created by piecing together first, middle, and last names
  public final String toString() {
      return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  private String myFirst, myMiddle, myLast;  // private instance variables
}




]0;lvm5@maroon07: ~/214/labs/09/java[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/java[00m$ javac -deprecation NameTester.java
]0;lvm5@maroon07: ~/214/labs/09/java[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/java[00m$ java NameTester
John Paul Jones
All tests passed!
]0;lvm5@maroon07: ~/214/labs/09/java[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/java[00m$ exit

Script done on 2024-03-25 13:17:47-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2024-03-25 20:53:51-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;lvm5@remotel3: ~/214/labs/09/ada[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ada[00m$ cat name_package.adb
-- name_package.adb defines operations for the Name type.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
---------------------------------------------------------i
with Ada.Text_IO; use Ada.Text_IO;
with Name_Package; use Name_Package;

package body name_package is
	procedure Init(TheName: out Name; First, Middle, Last : in String) is begin TheName.MyFirst := First; TheName.MyMiddle := Middle; TheName.MyLast := Last; end Init;

	function getFirst(TheName : in Name) return String is begin return TheName.MyFirst; end getFirst;

	function getMiddle(TheName : in Name) return String is begin return TheName.MyMiddle; end getMiddle;

	function getLast(TheName : in Name) return String is begin return TheName.MyLast; end getLast;

	function getFullName(TheName: in Name) return String is begin return TheName.myFirst & TheName.MyMiddle & TheName.MyLast; end getFullName;

	procedure Put(TheName: in Name) is begin Put(getFullName(TheName)); end Put;

end name_package;

procedure name_package is
	aName : Name_Package.Name;

begin
	Name_Package.Init(aName, "John    ", "Paul    ", "Jones   ");
end Name_Package;
]0;lvm5@remotel3: ~/214/labs/09/ada[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ada[00m$ cat name_package.ads
-- name_package.ads declares the Name type and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
--------------------------------------------------------------
package Name_Package is
	type Name is private;
	----------------------------------------------
        -- Init initializes a Name variable          -
        -- Receive: theName, the Name variable;      -
        --          First, the first name;           -
        --          Middle, the middle name;         -
        --          Last, the last name.             -
        -- Return: theName, its fields set to First, -
        --               Middle, and Last.           -
        ----------------------------------------------

	procedure Init(TheName: out Name; First, Middle, Last : in String);
	
	----------------------------------------------
        -- getFirst(Name) retrieves Name.myFirst        -
        -- Receive: theName, a Name.                 -
        -- PRE: theName has been initialized.        -
        -- Return: theName.myFirst.                  -
        ----------------------------------------------

	function getFirst(TheName : in Name) return String;
	function getMiddle(TheName : in Name) return String;
	function getLast(TheName : in Name) return String;
	-----------------------------------------------
        -- getFullName(Name) retrieves Name as a String  -
        -- Receive: theName, a Name.                  -
        -- PRE: theName has been initialized.         -
        -- Return: a String representation of theName -
        -----------------------------------------------

	function getFullName(TheName: in Name) return String;
	----------------------------------------------
        -- Put(Name) displays a Name value.          -
        -- PRE: theName has been initialized.        -
        -- Receive: theName, a Name.                 -
        -- Output: theName, to the screen.           -
        ----------------------------------------------

	procedure Put(TheName: in Name);

	private

	NAME_SIZE : Integer := 8;
	type Name is record myFirst, myMiddle, myLast : String(1..NAME_SIZE); end record;
end Name_Package;
]0;lvm5@remotel3: ~/214/labs/09/ada[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ada[00m$ gcc -c name_package.adb
[01m[Kgcc:[m[K [01;31m[Kfatal error: [m[Kcannot execute '[01m[Kgnat1[m[K': execvp: No such file or directory
compilation terminated.
]0;lvm5@remotel3: ~/214/labs/09/ada[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ada[00m$ exit

Script done on 2024-03-25 20:54:31-04:00 [COMMAND_EXIT_CODE="1"]
Script started on 2024-03-25 14:25:28-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="181" LINES="71"]
]0;lvm5@maroon07: ~/214/labs/09/clojure[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/clojure[00m$ cat src/nameTester.clj 
;; nameTester.clj tests a Clojure Name type,
;;  stored in Name.clj (in the src directory).
;;
;; Output: the results of testing the Name functions.
;;
;; Usage: clojure -m nameTester
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)
(load "Name")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    (println "\nAll tests passed!\n")
  )
)


]0;lvm5@maroon07: ~/214/labs/09/clojure[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/clojure[00m$ cat src/Name.clj 
;; Name.clj is a module for our 'Name' type-abstraction.
;;
;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;; Completed by:
;; Date:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Replace this line with the Name-related functions from nameTester.clj
;; Create a record/struct type named Name
(defrecord Name [firstName middleName lastName])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-Name constructs a Name object from three strings. 
;; Receive: firstN, middleN and lastN, three strings.
;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Name [firstN middleN lastN]
  (->Name firstN middleN lastN)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getFirst extracts the first name of a name object.
;; Receive: aName, a Name.
;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getFirst [aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getMiddle extracts the middle name of a name object.
;; Receive: aName, a Name. 
;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getMiddle [aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getLast extracts the last name of a name object.
;; Receive: aName, a Name. 
;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLast [aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toString converts a Name to a string
;; Receive: aName, a Name. 
;; Return: a string containing firstName, middleName, lastName,
;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toString [aName]
  (str (getFirst aName) " " (getMiddle aName) " " (getLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; printName displays a name object. 
;; Receive: aName, a Name, 
;; Output: the string representation of aName. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printName [aName]
  (print (toString aName) )
)

]0;lvm5@maroon07: ~/214/labs/09/clojure[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/clojure[00m$ make
clojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

All tests passed!

]0;lvm5@maroon07: ~/214/labs/09/clojure[01;32mlvm5@maroon07[00m:[01;34m~/214/labs/09/clojure[00m$ exit

Script done on 2024-03-25 14:25:59-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2024-03-25 20:53:04-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
cat ]0;lvm5@remotel3: ~/214/labs/09/ruby[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ruby[00m$ cat     cat Name.rb
#####################################################
#Name: Lily McAboy
#Date 3/25/2024
#Name Class
####################################################

module Names
class Name

  def initialize(first, middle, last)
    @first, @middle, @last = first, middle, last
  end

  attr_reader :first, :middle, :last

  def fullName
    @first + " " + @middle + " " + @last
  end

  def print
    puts fullName
    fullName
  end
end
end
]0;lvm5@remotel3: ~/214/labs/09/ruby[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ruby[00m$ cat nameTester.rb 
# nameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:
# Date:
####################################################

require 'test/unit/assertions'
include Test::Unit::Assertions
require './Name'

def testName
   name = Names::Name.new("John", "Paul", "Jones")

   assert name.first == "John", 
           "first failed"
   assert name.middle == "Paul",
           "middle failed"
   assert name.last == "Jones",
           "last failed"
   assert name.fullName == "John Paul Jones",
           "fullName failed"
   assert name.print == "John Paul Jones",
           "print failed"
   
   print "All tests passed!\n"
end

testName

]0;lvm5@remotel3: ~/214/labs/09/ruby[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ruby[00m$ ruby nameTester.rb
John Paul Jones
All tests passed!
]0;lvm5@remotel3: ~/214/labs/09/ruby[01;32mlvm5@remotel3[00m:[01;34m~/214/labs/09/ruby[00m$ exit

Script done on 2024-03-25 20:53:24-04:00 [COMMAND_EXIT_CODE="0"]
